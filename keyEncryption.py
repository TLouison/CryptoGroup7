def initPermute(S):
    P = [0]*64

    P[57] = S[0]
    P[59] = S[8]
    P[61] = S[16]
    P[63] = S[24]
    P[56] = S[32]
    P[58] = S[40]
    P[60] = S[48]
    P[62] = S[56]
    P[49] = S[1]
    P[51] = S[9]
    P[53] = S[17]
    P[55] = S[25]
    P[48] = S[33]
    P[50] = S[41]
    P[52] = S[49]
    P[54] = S[57]
    P[41] = S[2]
    P[43] = S[10]
    P[45] = S[18]
    P[47] = S[26]
    P[40] = S[34]
    P[42] = S[42]
    P[44] = S[50]
    P[46] = S[58]
    P[33] = S[3]
    P[35] = S[11]
    P[37] = S[19]
    P[39] = S[27]
    P[32] = S[35]
    P[34] = S[43]
    P[36] = S[51]
    P[38] = S[59]
    P[25] = S[4]
    P[27] = S[12]
    P[29] = S[20]
    P[31] = S[28]
    P[24] = S[36]
    P[26] = S[44]
    P[28] = S[52]
    P[30] = S[60]
    P[17] = S[5]
    P[19] = S[13]
    P[21] = S[21]
    P[23] = S[29]
    P[16] = S[37]
    P[18] = S[45]
    P[20] = S[53]
    P[22] = S[61]
    P[9] = S[6]
    P[11] = S[14]
    P[13] = S[22]
    P[15] = S[30]
    P[8] = S[38]
    P[10] = S[46]
    P[12] = S[54]
    P[14] = S[62]
    P[1] = S[7]
    P[3] = S[15]
    P[5] = S[23]
    P[7] = S[31]
    P[0] = S[39]
    P[2] = S[47]
    P[4] = S[55]
    P[6] = S[63]

    return ''.join(P)

def encryptDES():
    return 

# def decryptDES():

if __name__ == "__main__":
    print(initPermute("0001000010110111011001111100001110010101101110000100010000001011"))